#include <iostream>
#include <vector>
#include<string>
#include<algorithm>
#include<sstream>
#include<fstream>
using namespace std;
class Core
{
    public:
      int registers[32];
       int pc;
       vector<string> program;
  public:
    Core()
    {
        pc=0;
        int registers[32]={0};
    }
    void execute(vector<int> &memory)
    {
        string instruction = program[pc];

         stringstream ss(instruction);
        vector<string> parts;

        string part;
            while (getline(ss, part, ' ')) {
             parts.push_back(part);

         }

        string opcode = parts[0];
        if (opcode == "add") {
            int rd = stoi(parts[1].substr(1));
            int rs1 = stoi(parts[2].substr(1));
            int rs2 = stoi(parts[3].substr(1));
            registers[rd] = registers[rs1] + registers[rs2];
        } else if (opcode == "ld") {
            int rd = stoi(parts[1].substr(1));
            int location = stoi(parts[2]);
            registers[rd] = memory[location];
        }
        else if(opcode=="li")
        {
            int rd=stoi(parts[1].substr(1));
            registers[rd]=stoi(parts[2]);
        }
       else if(opcode=="addi")
       {
          int rd = stoi(parts[1].substr(1));
          int rs1 = stoi(parts[2].substr(1));
          registers[rd]=registers[rs1]+stoi(parts[3]);
       }
       else if(opcode=="lw")
       {
         int rd = stoi(parts[1].substr(1));
        string ostr=parts[2].substr(0,parts[2].find('('));
        string find=parts[2].substr(parts[2].find('x')+1);
        int offset=stoi(ostr);
        string st="";
        for(int i=0;i<find.length()-1;i++)
          {
              st+=find[i];
          }
         int addr=registers[stoi(st)];

        registers[rd] = memory[addr+offset];
       }
        
        pc += 1;
    }
};
class Processor {
public:
    vector<int> memory;
    int clock;
    vector<Core> cores;

public:
    Processor()
    {
        memory = vector<int>(4096, 0);
       clock = 0;
       cores = vector<Core>(2);
    }
    void run() {
        int max_pc = max(cores[0].program.size(), cores[1].program.size());
        while (clock < max_pc) {
            for (int i = 0; i < 2; ++i) {
                if (clock < cores[i].program.size()) {
                    cores[i].execute(memory);
                }
            }
            clock += 1;
        }
    }
};
int main() {
    Processor sim;
    ifstream input("bubblesort.asm");
    if (!input.is_open()) {
        cerr << "Failed to open bubblesort.asm" << endl;
        return 1;
    }
    string line;
    vector<string> asmLines;
    while (getline(inputFile, line)) {
        asmLines.push_back(line);
    }

    inputFile.close();

}
